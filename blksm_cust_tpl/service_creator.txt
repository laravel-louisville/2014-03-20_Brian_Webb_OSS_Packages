<?php namespace Services\{{Entities}};

use Contracts\Repositories\{{Entity}}RepositoryInterface;
use Contracts\Notification\CreatorInterface;
use Validators\{{Entity}}Validator;

class {{Entity}}Creator
{

    protected $validator;


    /**
     * Inject the validator that will be used for
     * creation
     * 
     * @param {{Entity}}Validator $validator
     */
    public function __construct({{Entity}}Validator $validator)
    {
        $this->validator = $validator;
    }

    /**
     * Attempt to create a new {{instance}} with the given attributes and
     * notify the $listener of the success or failure
     * 
     * @param  {{Entity}}RepositoryInterface ${{instance}}     
     * @param  CreatorInterface         $listener  
     * @param  array                    $attributes
     * @return mixed - returned value from the $listener                        
     */
    public function create({{Entity}}RepositoryInterface ${{instance}}, CreatorInterface $listener, array $attributes = [])
    {
        if ($this->validator->validate($attributes)) {

            $instance = ${{instance}}->create($attributes);
            
            return $listener->creationSucceeded($instance);

        } else {

            return $listener->creationFailed($this->validator);
        }
    }
}
